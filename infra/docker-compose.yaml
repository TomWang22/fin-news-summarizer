# infra/docker-compose.yaml
services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: finnews
      POSTGRES_USER: finuser
      POSTGRES_PASSWORD: finpass
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finuser -d finnews"]
      interval: 5s
      timeout: 5s
      retries: 10

      # --- Redis (rate limits + cache) ---
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"   # optional, local debugging
    restart: unless-stopped

  # --- Prometheus (scrapes API metrics) ---
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - api

  # --- Grafana (optional dashboards) ---
  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    depends_on:
      - prometheus

  # --- Kafka (Redpanda: single-binary Kafka, dev-friendly) ---
  kafka:
    image: redpandadata/redpanda:latest
    command:
      - redpanda
      - start
      - --mode=dev-container
      - --overprovisioned
      - --smp=1
      - --memory=512M
      - --reserve-memory=0M
      - --node-id=0
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
    restart: unless-stopped

  api:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./env.api
    expose:
      - "8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/api/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  nginx:
    build:
      context: ..
      dockerfile: infra/nginx.Dockerfile
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount your mkcert outputs (relative to infra/):
      # infra/certs/dev-cert.pem -> container /etc/nginx/certs/dev-cert.pem
      # infra/certs/dev-key.pem  -> container /etc/nginx/certs/dev-key.pem
      - ./certs:/etc/nginx/certs:ro
    restart: unless-stopped

volumes:
  pgdata:
